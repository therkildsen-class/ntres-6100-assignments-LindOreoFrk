---
title: "Assignment 7"
format: gfm
editor: visual
---

# **Relational data plus revisiting data wrangling and visualization**

## **Load packages**

```{r}
library(tidyverse)
library(knitr)
library(dslabs)
```

## Exercise 1. **Tibble and Data Import**

#### **1.1 Create the following tibble manually, first using `tribble()` and then using `tibble()`. Print both results. \[We didn’t have time to cover this in class, but look up how these functions work [here](https://r4ds.had.co.nz/tibbles.html#creating-tibbles)\]**

#### **`tribble():`**

```{r}
## # A tibble: 2 × 3
##       a     b c     
##   <dbl> <dbl> <chr> 
## 1     1   2.1 apple 
## 2     2   3.2 orange

tribble(
  ~a, ~b, ~c,
  1, 2.1, "apple",
  2, 3.2, "orange"
)
```

#### **`tibble()`**

```{r}
## # A tibble: 2 × 3
##       a     b c     
##   <int> <dbl> <chr> 
## 1     1   2.1 apple 
## 2     2   3.2 orange
tibble(
  a = c(1,2),
  b = c(2.1, 3.2),
  c = c("apple", "orange")
)
```

#### **1.2 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt` into R. Change the column names into “Name”, “Weight”, “Price”.**

```{r}
## # A tibble: 3 × 3
##   Name   Weight Price
##   <chr>   <dbl> <dbl>
## 1 apple       1   2.9
## 2 orange      2   4.9
## 3 durian     10  19.9

dataset2 <- read_csv("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset2.txt")

colnames(dataset2) <- c("Name", "Weight", "Price")

dataset2
```

#### **1.3 Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt` into R. Watch out for the first few lines, missing values, separators, quotation marks, and deliminaters.**

```{r}
## # A tibble: 3 × 3
##   Name   Weight Price
##   <chr>   <dbl> <dbl>
## 1 apple       1   2.9
## 2 orange      2  NA  
## 3 durian     NA  19.9

dataset3 <- read_delim(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/dataset3.txt",
  delim = ";",   
  skip = 2,
  na = c("?", "Not Available")
)

dataset3
```

## **Exercise 2. Weather station**

This dataset contains the weather and air quality data collected by a weather station in Taiwan. It was obtained from the Environmental Protection Administration, Executive Yuan, R.O.C. (Taiwan).

#### **2.1 Variable descriptions**

-   The text file `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt` contains descriptions of different variables collected by the station.

-   Import it into R and print it in a table as shown below with `kable()`.

```{r}
WS_notes <- read_delim("https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station_notes.txt",
                       delim = "-",
                       trim_ws = TRUE)
kable(WS_notes)
```

`#` indicates invalid value by equipment inspection\
`*` indicates invalid value by program inspection\
`x` indicates invalid value by human inspection\
`NR` indicates no rainfall\
blank indicates no data

#### **2.2 Data tidying**

-   Import `https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv` into R. As you can see, this dataset is a classic example of untidy data: values of a variable (i.e. hour of the day) are stored as column names; variable names are stored in the `item` column.

-   Clean this dataset up and restructure it into a tidy format.

-   Parse the `date` variable into date format and parse `hour` into time.

-   Turn all invalid values into `NA` and turn `NR` in rainfall into `0`.

-   Parse all values into numbers.

-   Show the first 6 rows and 10 columns of this cleaned dataset, as shown below, *without* using `kable()`.

*Hints: you don’t have to perform these tasks in the given order; also, warning messages are not necessarily signs of trouble.*

```{r}
ws_clean <- read_csv(
  "https://raw.githubusercontent.com/nt246/NTRES-6100-data-science/master/datasets/2015y_Weather_Station.csv",
  col_types = cols(.default = "c") 
) %>%
  pivot_longer(
    cols = matches("^(X)?\\d{2}$"), 
    names_to = "hour", 
    values_to = "value"
  ) %>%
  mutate(
    hour  = str_remove(hour, "^X"),
    hour  = hms::as_hms(sprintf("%02d:00:00", as.integer(hour))), 
    value = na_if(value, ""),
    value = if_else(value %in% c("#","*","x"), NA, value),
    value = if_else(item == "RAINFALL" & value == "NR", "0", value),
    value = as.numeric(value),
    date  = as.Date(date)
  ) %>%
  pivot_wider(names_from = item, values_from = value) %>%
  arrange(date, hour)

ws_clean %>% select(1:10) %>% head(6)


```

#### **2.3 Using this cleaned dataset, plot the daily variation in ambient temperature on September 25, 2015, as shown below.**

```{r}
ws_clean %>%
  filter(date == as.Date("2015-09-25")) %>%
  ggplot(aes(x = hour, y = AMB_TEMP)) +
  geom_line()

```

#### **2.4 Plot the daily average ambient temperature throughout the year with a continuous line, as shown below.**

```{r}
ws_clean %>%
  group_by(date) %>%
  summarise(daily_average_ambient_temp = mean(AMB_TEMP, na.rm = TRUE)) %>%
  ggplot(aes(x = date, y = daily_average_ambient_temp)) +
  geom_line()
```

#### **2.5 Plot the total rainfall per month in a bar chart, as shown below.**

*Hint: separating date into three columns might be helpful.*

```{r}
ws_clean %>%
  mutate(month = format(date, "%m")) %>%
  group_by(month) %>%
  summarise(MonthlyRainfall = sum(RAINFALL, na.rm = TRUE)) %>%
  ggplot(aes(x = month, y = MonthlyRainfall)) +
  geom_col()

```

#### **2.6 Plot the per hour variation in PM2.5 in the first week of September with a continuous line, as shown below.**

*Hint: uniting the date and hour and parsing the new variable might be helpful.*

```{r}
ws_clean %>%
  filter(date >= "2015-09-01", date < "2015-09-08") %>%
  unite("datetime", date, hour, sep = " ") %>%
  mutate(datetime = as.POSIXct(datetime, format = "%Y-%m-%d %H:%M:%S")) %>%
  ggplot(aes(x = datetime, y = PM2.5)) +
  geom_line()
```
